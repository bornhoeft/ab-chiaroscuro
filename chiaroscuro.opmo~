;;; ---------------------------------------------------------------------
;;;
;;; Chiaroscuro
;;; Achim Bornhoeft (c) 2025
;;; 2025-08-22
;;;
;;; ---------------------------------------------------------------------

#|
Chiaroscuro

bezeichnet ein in der Spätrenaissance und im Barock entwickeltes 
Gestaltungsmittel der Grafik und Malerei, das sich durch starke 
Hell-Dunkel-Kontraste auszeichnet und sowohl der Steigerung des 
Räumlichen als auch der des Ausdrucks dient.
https://de.wikipedia.org/wiki/Chiaroscuro

Chiaroscuro (Italian: “light-dark”), refers to a design medium developed 
in the late Renaissance and Baroque periods in graphic art and painting, 
which is characterized by strong contrasts of light and dark and serves 
to enhance both the spatial and the expressive.
|#

;;; Franz Schubert, String Quartet No. 14 in D minor, D. 810
;;; Second movement, Andante con moto, "Death and the Maiden"
;;; Measures 1 to 32

;; import of the score
;; Preview with cmd-2
(setf 
 material
 (musicxml-to-omn 
  "~/Documents/werke/090-Blickwinkel/sco/schubert-D810-2.musicxml"))

;; string quartet instruments
(setf instruments '(violin viola violoncello contrabass))

;; init seed for random processes
(init-seed 12358)

;; change pitches to random octaves
(setf new-material
      (loop for i in instruments
              for m in material
              collect
              (rnd-octaves i m)))

;; extract the number of velocities from each instrument
(setf diss-vel-len
      (loop for i in new-material
            collect (length (flatten (omn :velocity i)))))



;; make new weighted velocities 
(setf new-velocity
      (loop for i in diss-vel-len
              collect
              (gen-weight i '((ff 1) (pp 2)))))

;; convert velocity to dynamic signs
(setf new-vel
      (velocity-to-dynamic new-velocity))


;; adding text attribute short cuts for the notation
(add-text-attributes
 '(tasto-pont "tasto⟹pont")
 '(t-p "t⟹p")
 '(pont-tasto "pont⟹tasto")
 '(p-t "p⟹t")
 '(pont-tasto-pont "pont⟹tasto⟹pont")
 '(p-t-p "p⟹t⟹p")
 '(tasto-pont-tasto "tasto⟹pont⟹tasto")
 '(t-p-t "t⟹p⟹t")
 '(tasto-arr "tasto⟹")
 '(pont-arr "pont⟹"))

;; combine tasto with pp and pont with ff
(setf articulations
      (loop for i in new-velocity
            collect
            (loop for j in i
                    when (equal j 'pp)
                  collect 'tasto-arr
                    when (equal j 'ff)
                    collect 'pont-arr)))

#|
;; without transistions (not used)
(setf articulations
      (loop for i in new-velocity
            collect
            (loop for j in i
                    when (equal j 'pp)
                  collect 'tasto
                    when (equal j 'ff)
                    collect 'pont)))
|#

;; remove same consecutive articulations and replace them
;; with the repetition sign '-
(setf new-art
      (loop for i in articulations
        collect
        (loop for j in (cdr i) ; start with the second argument
                for k from 1
      if (equal (nth k i) ; compare the current
                  (nth (- k 1) i)) ; with the last element
                collect '- into reslis ; when equal collect '-
                else ; if not
                collect j into reslis ; collect the articulation
                ;; at the end add the first articulation to the list
                  finally (return (cons (first i) reslis)))))

;; test if the same amount of articulations than dynamics:
;; (loop for i in new-art collect (length i))

;; make the new voices and assign variables for def-score            
(assign-variable 'voc
(make-omn
 :pitch (omn :pitch new-material)
 :length (omn :length new-material)
 :velocity new-vel
 :articulation new-art))

;; individual corrections with dictum
(setf voc1 (dictum '((:bar 32 :if tasto-arr :do tasto) 
                     ;; replace last articulation
                     (:bar 32 :if pp< :do pp)
                     ;; replace last dynamic
                     ) 
                   (omn-to-time-signature voc1 '(4 4))))

(setf voc2 (dictum '((:bar 1 :event 1 :do pp<)
                     (:bar 31 :if tasto-arr :do tasto) 
                     (:bar 31 :if pp< :do pp)
                     (:bar 32 :remove :velocity))
                   (omn-to-time-signature voc2 '(4 4))))

(setf voc3 (dictum '((:bar 1 :event 1 :do pp<)
                     (:bar 32 :if tasto-arr :do tasto) 
                     (:bar 32 :if pp< :do pp)) 
                   (omn-to-time-signature voc3 '(4 4))))

(setf voc4 (dictum '((:bar 1 :event 1 :do pp<)
                     (:bar 31 :if tasto-arr :do tasto)) 
                   (omn-to-time-signature voc4 '(4 4))))

;; ---------------------------------------------------------
;; Score and Layout
;; ---------------------------------------------------------

(def-score chiaroscuro
    (:title "Chiaroscuro"
     :composer "Achim Bornhoeft"
     :copyright "Copyright © 2025"
     :key-signature 'chromatic
     :time-signature '((1 1 1 1) 4)
     :tempo 6
     :layout (list
              (bracket-group
               (violin-layout 'voc1 :name "Violin" :abbr "Vn")
               (viola-layout 'voc2 :name "Viola" :abbr "Va")
               (violoncello-layout 'voc3 :name "Violoncello" :abbr "Vc")
               (contrabass-layout 'voc4 :name "Doublebass" :abbr. "Db"))))
  (voc1
   :omn voc1
   :channel 1
   :sound 'gm
   :program 'violin
   :volume 100
   :pan 44
   :controllers (91 '(48))
   )
  
  (voc2
   :omn voc2
   :channel 2
   :sound 'gm
   :program 'viola
   :volume 100
   :pan 54
   :controllers (91 '(48))
   )

  (voc3
   :omn voc3
   :channel 3
   :sound 'gm
   :program 'cello
   :volume 90
   :pan 74
   :controllers (91 '(60))
   )

  (voc4
   :omn voc4
   :channel 4
   :sound 'gm
   :program 'contrabass
   :volume 90
   :pan 84
   :controllers (91 '(60))
   )
  )

;; display the score
(display-musicxml *last-score*)

;; (defparameter *default-notation-editor* "MuseScore 4.app")
(defparameter *default-notation-editor* "Sibelius.app")

;; open in external editor
(musicxml-to-editor)